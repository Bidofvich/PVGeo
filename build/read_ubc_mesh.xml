<ServerManagerConfiguration>
  <ProxyGroup name="sources">
    <SourceProxy name="ReadUBCMesh" class="vtkPythonProgrammableFilter" label="Read UBC Mesh Two-File Format">
      <Documentation
        long_help="3D models are defined using a 2-file format. The &quot;mesh&quot; file describes how the earth is descritized. The &quot;model&quot; file lists the physical property values for all cells in a mesh. A model file is meaningless without an associated mesh file. The first value is for the model's top-front-right, (top-south-west) corner cell. Default file delimeter is a space character"
        short_help="3D models are defined using a 2-file format. The &quot;mesh&quot; file describes how the earth is descritized. The &quot;model&quot; file lists the physical property values for all cells in a mesh. A model file is meaningless without an associated mesh file. The first value is for the model's top-front-right, (top-south-west) corner cell. Default file delimeter is a space character">
      </Documentation>
        <Hints>
            <ShowInMenu category="CSM GP Readers" />
        </Hints>

<Hints>
    <ReaderFactory extensions="mesh msh dat"
                   file_description="UBC Mesh Two-File Format" />
</Hints>


            <StringVectorProperty
            panel_visibility="default"
            name="Delimiter_Field"
            label="Delimiter Field"
            initial_string="Delimiter_Field"
            command="SetParameter"
            animateable="1"
            default_values=" "
            number_of_elements="1">
            <Documentation></Documentation>
            </StringVectorProperty>


          <StringVectorProperty
            panel_visibility="default"
            name="FileName_Mesh"
            label="FileName Mesh"
            initial_string="FileName_Mesh"
            command="SetParameter"
            animateable="1"
            default_values="absolute path"
            number_of_elements="1">
            <FileListDomain name="files"/>
            <Documentation></Documentation>
          </StringVectorProperty>


          <StringVectorProperty
            panel_visibility="default"
            name="FileName_Model"
            label="FileName Model"
            initial_string="FileName_Model"
            command="SetParameter"
            animateable="1"
            default_values="absolute path"
            number_of_elements="1">
            <FileListDomain name="files"/>
            <Documentation></Documentation>
          </StringVectorProperty>


      <IntVectorProperty
        panel_visibility="default"
        name="Use_tab_delimiter"
        label="Use tab delimiter"
        initial_string="Use_tab_delimiter"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation></Documentation>
      </IntVectorProperty>


            <StringVectorProperty
            panel_visibility="default"
            name="data_name"
            label="data name"
            initial_string="data_name"
            command="SetParameter"
            animateable="1"
            default_values=""
            number_of_elements="1">
            <Documentation></Documentation>
            </StringVectorProperty>

      <!-- Output data type: "vtkRectilinearGrid" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="3"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="import numpy as np&#xA;import csv&#xA;import os&#xA;from vtk.util import numpy_support as nps&#xA;&#xA;if FileName_Mesh == 'absolute path':&#xA;    raise Exception('No mesh file selected. Aborting.')&#xA;if FileName_Model == 'absolute path':&#xA;    raise Exception('No model file selected. Aborting.')&#xA;&#xA;pdo = self.GetOutput() # vtkRectilinearGrid&#xA;&#xA;if (Use_tab_delimiter):&#xA;    Delimiter_Field = '\t'&#xA;&#xA;#--- Read in the mesh ---#&#xA;with open(FileName_Mesh) as f:&#xA;    reader = csv.reader(f, delimiter=Delimiter_Field)&#xA;&#xA;    # TODO: ignore header lines if start with '!'&#xA;&#xA;    # Number of CELLS in each axial direction&#xA;    h = reader.next()&#xA;    n1,n2,n3 = int(h[0]), int(h[1]), int(h[2])&#xA;    # change to number of POINTS in each axial direction&#xA;    n1,n2,n3 = n1+1,n2+1,n3+1&#xA;    pdo.SetDimensions(n1,n2,n3)&#xA;    #pdo.SetExtent(0,n1-1, 0,n2-1, 0,n3-1)&#xA;&#xA;    # The origin corner&#xA;    h = reader.next()&#xA;    o1,o2,o3 = float(h[0]), float(h[1]), float(h[2])&#xA;&#xA;    # Get spacings for 1st dimension:&#xA;    h = reader.next()&#xA;    # Set x-coordinates from spacings&#xA;    xCoords = np.zeros(n1)&#xA;    xCoords[0] = o1&#xA;    for i in range(1, n1):&#xA;        xCoords[i] = xCoords[i-1] + float(h[i-1])&#xA;    x = nps.numpy_to_vtk(num_array=xCoords,deep=True)&#xA;    pdo.SetXCoordinates(x)&#xA;&#xA;    print(np.shape(x), len(h))&#xA;&#xA;    # Get spacings for 2nd dimension:&#xA;    h = reader.next()&#xA;    # Set y-coordinates from spacings&#xA;    yCoords = np.zeros(n2)&#xA;    yCoords[0] = o2&#xA;    for i in range(1, n2):&#xA;        yCoords[i] = yCoords[i-1] + float(h[i-1])&#xA;    y = nps.numpy_to_vtk(num_array=yCoords,deep=True)&#xA;    pdo.SetYCoordinates(y)&#xA;&#xA;    # Get spacings for 3rd dimension:&#xA;    h = reader.next()&#xA;    # Set z-coordinates from spacings&#xA;    # NOTE: UBC Mesh Specifies positive Z as down&#xA;    zCoords = np.zeros(n3)&#xA;    zCoords[0] = o3&#xA;    for i in range(1, n3):&#xA;        zCoords[i] = zCoords[i-1] - float(h[i-1])&#xA;    z = nps.numpy_to_vtk(num_array=zCoords,deep=True)&#xA;    pdo.SetZCoordinates(z)&#xA;&#xA;    f.close()&#xA;&#xA;#--- Read in the model ---#&#xA;# TODO: ignore header lines if start with '!'&#xA;print('loaded the mesh!')&#xA;# Add the model data to the output grid&#xA;data = np.zeros((n1,n2,n3),dtype=float)&#xA;with open(FileName_Model) as f:&#xA;    for i in range(n1):&#xA;        for j in range(n2):&#xA;            for k in range(n3):&#xA;                data[i,j,k] = float(f.next())&#xA;    f.close()&#xA;&#xA;# Swap axes because VTK structures the coordinates a bit differently&#xA;#-  This is absolutely crucial!&#xA;#-  Do not play with unless you know what you are doing!&#xA;data = np.swapaxes(data,0,1)&#xA;data = np.swapaxes(data,0,2)&#xA;data = data.flatten()&#xA;&#xA;# If no name given for data by user, use the basename of the file&#xA;if data_name == '':&#xA;    data_name = os.path.basename(FileName_Model)&#xA;&#xA;c = nps.numpy_to_vtk(num_array=data,deep=True)&#xA;c.SetName(data_name)&#xA;pdo.GetPointData().AddArray(c)&#xA;"
        panel_visibility="advanced">
        <Hints>
         <Widget type="multi_line"/>
       </Hints>
      <Documentation>This property contains the text of a python program that
      the programmable source runs.</Documentation>
      </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from paraview import util&#xA;import csv&#xA;&#xA;if FileName_Mesh == 'absolute path':&#xA;    raise Exception('No mesh file selected. Aborting.')&#xA;&#xA;# Read in the mesh and set up structure of output grid from mesh file input&#xA;with open(FileName_Mesh) as f:&#xA;    reader = csv.reader(f, delimiter=Delimiter_Field)&#xA;&#xA;    # TODO: ignore header lines if start with '!'&#xA;&#xA;    # Number of points in each axial direction&#xA;    h = reader.next()&#xA;    n1,n2,n3 = int(h[0]), int(h[1]), int(h[2])&#xA;&#xA;    # ABSOLUTELY NECESSARY FOR THE FILTER TO WORK:&#xA;    util.SetOutputWholeExtent(self, [0,n1-1, 0,n2-1, 0,n3-1])&#xA;&#xA;    f.close()&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" />
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>

    </SourceProxy>
 </ProxyGroup>
</ServerManagerConfiguration>
