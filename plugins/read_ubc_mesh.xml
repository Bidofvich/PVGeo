<ServerManagerConfiguration>
  <ProxyGroup name="sources">
    <SourceProxy name="ReadUBCMesh" class="vtkPythonProgrammableFilter" label="Read UBC Mesh 2D/3D Two-File Format">
      <Documentation
        long_help="UBC Mesh 2D/3D models are defined using a 2-file format. The &quot;mesh&quot; file describes how the data is descritized. The &quot;model&quot; file lists the physical property values for all cells in a mesh. A model file is meaningless without an associated mesh file. The reader will automatically detect if the mesh is 2D or 3D and read the remainder of the data with that dimensionality assumption. If the mesh file is 2D, then then model file must also be in the 2D format (same for 3D)."
        short_help="UBC Mesh 2D/3D models are defined using a 2-file format. The &quot;mesh&quot; file describes how the data is descritized. The &quot;model&quot; file lists the physical property values for all cells in a mesh. A model file is meaningless without an associated mesh file. The reader will automatically detect if the mesh is 2D or 3D and read the remainder of the data with that dimensionality assumption. If the mesh file is 2D, then then model file must also be in the 2D format (same for 3D).">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGP Readers" />
      </Hints>
      <Hints>
        <ReaderFactory extensions="mesh msh dat txt"
          file_description="PVGP: UBC Mesh 2D/3D Two-File Format" />
      </Hints>

      <!-- Output data type: "vtkRectilinearGrid" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="3"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>





      <StringVectorProperty
        panel_visibility="default"
        name="Data_Name"
        label="Data Name"
        initial_string="Data_Name"
        command="SetParameter"
        animateable="1"
        default_values=""
        number_of_elements="1">
        <Documentation></Documentation>
      </StringVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="FileName_Mesh"
        label="FileName Mesh"
        initial_string="FileName_Mesh"
        command="SetParameter"
        animateable="1"
        default_values="absolute path"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation></Documentation>
      </StringVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="FileName_Model"
        label="FileName Model"
        initial_string="FileName_Model"
        command="SetParameter"
        animateable="1"
        default_values="absolute path"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation></Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty
        panel_visibility="advanced"
        name="Time_Step"
        label="Time Step"
        initial_string="Time_Step"
        command="SetParameter"
        animateable="1"
        default_values="1.0"
        number_of_elements="1">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGPpy.read import readUBCMesh&#xA;import os&#xA;# Make sure we have a file combo&#xA;if FileName_Mesh == 'absolute path':&#xA;    raise Exception('No mesh file selected. Aborting.')&#xA;if FileName_Model == 'absolute path':&#xA;    raise Exception('No model file selected. Aborting.')&#xA;# Get output&#xA;pdo = self.GetOutput()&#xA;# If no name given for data by user, use the basename of the file&#xA;if Data_Name == '':&#xA;    Data_Name = os.path.basename(FileName_Model)&#xA;# Read the UBC Mesh gridded data:&#xA;readUBCMesh(FileName_Mesh, FileName_Model, dataNm=Data_Name, pdo=pdo)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from paraview import util&#xA;from PVGPpy.read import ubcExtent&#xA;if FileName_Mesh == 'absolute path':&#xA;    raise Exception('No mesh file selected. Aborting.')&#xA;# Preview the mesh file and get the mesh extents&#xA;ext = ubcExtent(FileName_Mesh)&#xA;# Set the mesh extents&#xA;util.SetOutputWholeExtent(self, ext)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>


      <StringVectorProperty command="SetPythonPath"
                            name="PythonPath"
                            number_of_elements="1"
                            panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>
 </ProxyGroup>
</ServerManagerConfiguration>
