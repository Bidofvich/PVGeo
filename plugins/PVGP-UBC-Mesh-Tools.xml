<ServerManagerConfiguration>
  <!-- CATEGORY SOURCES -->
  <ProxyGroup name="sources">


    <!-- ./ubc//read_ubc_octree.py -->
    <SourceProxy
      name="ReadOcTreeMesh"
      class="vtkPythonProgrammableFilter"
      label="Read OcTree Mesh">
      <Documentation
        long_help="TODO"
        short_help="TODO">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGP UBC Mesh Tools" />
      </Hints>
      <Hints>
        <ReaderFactory extensions="mesh msh dat txt"
          file_description="PVGP: UBC OcTree Mesh File Format." />
      </Hints>

      <!-- Built on version: 0.6.3 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.6.3"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkUnstructuredGrid" -->
      <IntVectorProperty command="SetOutputDataSetType"
        default_values="4"
        name="OutputDataSetType"
        number_of_elements="1"
        panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="FileName_Mesh"
        label="FileName Mesh"
        initial_string="FileName_Mesh"
        command="SetParameter"
        animateable="1"
        clean_command="ClearParameter"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>This is the mesh file for a 2D or 3D UBC Mesh grid. This plugin only allows ONE mesh to be defined.</Documentation>
      </StringVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="FileName_Model"
        label="FileName Model"
        initial_string="FileName_Model"
        command="AddParameter"
        animateable="1"
        repeat_command="1"
        clean_command="ClearParameter"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>These are the model files to append to the mesh as data attributes. You can chose as many files as you would like for this.</Documentation>
      </StringVectorProperty>





      <DoubleVectorProperty
        panel_visibility="advanced"
        name="Time_Step"
        label="Time Step"
        initial_string="Time_Step"
        command="SetParameter"
        animateable="1"
        default_values="1.0"
        number_of_elements="1">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGPpy.read import ubcOcTree&#xA;import os&#xA;# Get output&#xA;pdo = self.GetOutput()&#xA;# Read the UBC OcTree gridded data:&#xA;try:&#xA;    ubcOcTree(FileName_Mesh, FileName_Model, pdo=pdo)&#xA;except NameError:&#xA;    ubcOcTree(FileName_Mesh, None, pdo=pdo)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from paraview import util&#xA;from PVGPpy.read import ubcExtent&#xA;# Preview the mesh file and get the mesh extents&#xA;ext = ubcExtent(FileName_Mesh)&#xA;# Set the mesh extents&#xA;util.SetOutputWholeExtent(self, ext)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>


      <StringVectorProperty
        command="SetPythonPath"
        name="PythonPath"
        number_of_elements="1"
        panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>

    <!-- ./ubc//read_ubc_mesh.py -->
    <SourceProxy
      name="ReadUBCMesh"
      class="vtkPythonProgrammableFilter"
      label="Read UBC Mesh 2D/3D Two-File Format">
      <Documentation
        long_help="UBC Mesh 2D/3D models are defined using a 2-file format. The &quot;mesh&quot; file describes how the data is discretized. The &quot;model&quot; file lists the physical property values for all cells in a mesh. A model file is meaningless without an associated mesh file. The reader will automatically detect if the mesh is 2D or 3D and read the remainder of the data with that dimensionality assumption. If the mesh file is 2D, then then model file must also be in the 2D format (same for 3D)."
        short_help="UBC Mesh 2D/3D models are defined using a 2-file format. The &quot;mesh&quot; file describes how the data is discretized. The &quot;model&quot; file lists the physical property values for all cells in a mesh. A model file is meaningless without an associated mesh file. The reader will automatically detect if the mesh is 2D or 3D and read the remainder of the data with that dimensionality assumption. If the mesh file is 2D, then then model file must also be in the 2D format (same for 3D).">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGP UBC Mesh Tools" />
      </Hints>
      <Hints>
        <ReaderFactory extensions="mesh msh dat txt"
          file_description="PVGP: UBC Mesh 2D/3D Two-File Format" />
      </Hints>

      <!-- Built on version: 0.6.3 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.6.3"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkRectilinearGrid" -->
      <IntVectorProperty command="SetOutputDataSetType"
        default_values="3"
        name="OutputDataSetType"
        number_of_elements="1"
        panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="FileName_Mesh"
        label="FileName Mesh"
        initial_string="FileName_Mesh"
        command="SetParameter"
        animateable="1"
        clean_command="ClearParameter"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>This is the mesh file for a 2D or 3D UBC Mesh grid. This plugin only allows ONE mesh to be defined.</Documentation>
      </StringVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="FileName_Model"
        label="FileName Model"
        initial_string="FileName_Model"
        command="AddParameter"
        animateable="1"
        repeat_command="1"
        clean_command="ClearParameter"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>These are the model files to append to the mesh as data attributes. You can chose as many files as you would like for this.</Documentation>
      </StringVectorProperty>






      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGPpy.read import ubcTensorMesh&#xA;import os&#xA;# Get output&#xA;pdo = self.GetOutput()&#xA;# Read the UBC Mesh gridded data:&#xA;ubcTensorMesh(FileName_Mesh, FileName_Model, pdo=pdo)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from paraview import util&#xA;from PVGPpy.read import ubcExtent&#xA;if FileName_Mesh == 'absolute path':&#xA;    raise Exception('No mesh file selected. Aborting.')&#xA;# Preview the mesh file and get the mesh extents&#xA;ext = ubcExtent(FileName_Mesh)&#xA;# Set the mesh extents&#xA;util.SetOutputWholeExtent(self, ext)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>


      <StringVectorProperty
        command="SetPythonPath"
        name="PythonPath"
        number_of_elements="1"
        panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>
  </ProxyGroup>  <!-- CATEGORY FILTERS -->
  <ProxyGroup name="filters">


    <!-- ./ubc//filter_ubc_add_model.py -->
    <SourceProxy
      name="AddUBCModelToMesh"
      class="vtkPythonProgrammableFilter"
      label="Add UBC Model To Mesh">
      <Documentation
        long_help="This filter allows you to choose a UBC model file to append as an attribute to an already created vtkRectilinearGrid of a UBC 2D or 3D Mesh."
        short_help="This filter allows you to choose a UBC model file to append as an attribute to an already created vtkRectilinearGrid of a UBC 2D or 3D Mesh.">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGP UBC Mesh Tools" />
      </Hints>

      <!-- Built on version: 0.6.3 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.6.3"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkRectilinearGrid" -->
      <IntVectorProperty command="SetOutputDataSetType"
        default_values="3"
        name="OutputDataSetType"
        number_of_elements="1"
        panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="FileName_Model"
        label="FileName Model"
        initial_string="FileName_Model"
        command="AddParameter"
        animateable="1"
        repeat_command="1"
        clean_command="ClearParameter"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>These are the model files to append to the mesh as data attributes. You can chose as many files as you would like for this.</Documentation>
      </StringVectorProperty>


      <InputProperty
        name="Input"
        command="SetInputConnection">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>

          <DataTypeDomain name="input_type">
            <DataType value="vtkRectilinearGrid"/>
          </DataTypeDomain>
      </InputProperty>



      <IntVectorProperty
        panel_visibility="default"
        name="_2D"
        label=" 2D"
        initial_string="_2D"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation></Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGPpy.read import ubcModel3D, ubcModel2D, placeModelOnMesh&#xA;import os&#xA;&#xA;pdi = self.GetInput() # vtkRectilinearGrid&#xA;pdo = self.GetOutput() # vtkRectilinearGrid&#xA;&#xA;pdo.DeepCopy(pdi) # ShallowCopy if you want changes to propagate&#xA;&#xA;if _2D: model = ubcModel2D(FileName_Model)&#xA;else: model = ubcModel3D(FileName_Model)&#xA;# Place read model on the mesh&#xA;placeModelOnMesh(pdo, model)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>



      <StringVectorProperty
        command="SetPythonPath"
        name="PythonPath"
        number_of_elements="1"
        panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>
  </ProxyGroup>
</ServerManagerConfiguration>