<ServerManagerConfiguration>
  <!-- CATEGORY FILTERS -->
  <ProxyGroup name="filters">


    <!-- ./pvgp-grids//filter_reverse_grid_axii.py -->
    <SourceProxy name="ReverseImageDataAxii" class="vtkPythonProgrammableFilter" label="Reverse ImageData Axii">
      <Documentation
        long_help="This filter will flip ImageData on any of the three cartesian axii. A checkbox is provided for each axis on which you may desire to flip the data."
        short_help="This filter will flip ImageData on any of the three cartesian axii. A checkbox is provided for each axis on which you may desire to flip the data.">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGP General Grids" />
      </Hints>

      <!-- Built on version: 0.6.0 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.6.0"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkImageData" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="6"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>


      <InputProperty
        name="Input"
        command="SetInputConnection">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>
          
          <DataTypeDomain name="input_type">
            <DataType value="vtkImageData"/>
          </DataTypeDomain>
      </InputProperty>



      <IntVectorProperty
        panel_visibility="default"
        name="reverse_x_dir"
        label="reverse x dir"
        initial_string="reverse_x_dir"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Reverse all data along the X-axis</Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="reverse_y_dir"
        label="reverse y dir"
        initial_string="reverse_y_dir"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Reverse all data along the Y-axis</Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="reverse_z_dir"
        label="reverse z dir"
        initial_string="reverse_z_dir"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Reverse all data along the Z-axis</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGPpy.filt import reverseGridAxii&#xA;pdi = self.GetInput() # vtkImageData&#xA;image = self.GetOutput() # vtkImageData&#xA;&#xA;# Make user selection iterable&#xA;axes = [reverse_x_dir, reverse_y_dir, reverse_z_dir]&#xA;&#xA;reverseGridAxii(pdi, axes=axes, pdo=image)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>



      <StringVectorProperty command="SetPythonPath"
                            name="PythonPath"
                            number_of_elements="1"
                            panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>

    <!-- ./pvgp-grids//filter_table_to_uniform_grid.py -->
    <SourceProxy name="TableToUniformGrid" class="vtkPythonProgrammableFilter" label="Table To Uniform Grid">
      <Documentation
        long_help="This filter takes a vtkTable object with columns that represent data to be translated (reshaped) into a 3D grid (2D also works, just set the third dimensions extent to 1). The grid will be a n1 by n2 by n3 vtkImageData structure and an origin (south-west bottom corner) can be set at any xyz point. Each column of the vtkTable will represent a data attribute of the vtkImageData formed (essentially a uniform mesh). The SEPlib option allows you to unfold data that was packed in the SEPlib format where the most important dimension is z and thus the z data is d1 (d1=z, d2=y, d3=x). When using SEPlib, specify n1 as the number of elements in the Z-direction, n2 as the number of elements in the X-direction, and n3 as the number of elements in the Y-direction (and so on for other parameters)."
        short_help="This filter takes a vtkTable object with columns that represent data to be translated (reshaped) into a 3D grid (2D also works, just set the third dimensions extent to 1). The grid will be a n1 by n2 by n3 vtkImageData structure and an origin (south-west bottom corner) can be set at any xyz point. Each column of the vtkTable will represent a data attribute of the vtkImageData formed (essentially a uniform mesh). The SEPlib option allows you to unfold data that was packed in the SEPlib format where the most important dimension is z and thus the z data is d1 (d1=z, d2=y, d3=x). When using SEPlib, specify n1 as the number of elements in the Z-direction, n2 as the number of elements in the X-direction, and n3 as the number of elements in the Y-direction (and so on for other parameters).">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGP General Grids" />
      </Hints>

      <!-- Built on version: 0.6.0 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.6.0"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkImageData" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="6"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

<IntVectorProperty
    name="order"
    command="SetParameter"
    number_of_elements="1"
    initial_string="test_drop_down_menu"
    default_values="0">
    <EnumerationDomain name="enum">
            <Entry value="0" text="Fortran-style: column-major order"/>
            <Entry value="1" text="C-style: Row-major order"/>
    </EnumerationDomain>
    <Documentation>
        This is the type of memory ordering to use.
    </Documentation>
</IntVectorProperty>


      <InputProperty
        name="Input"
        command="SetInputConnection">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>
          
          <DataTypeDomain name="input_type">
            <DataType value="vtkTable"/>
          </DataTypeDomain>
      </InputProperty>



      <IntVectorProperty
        panel_visibility="default"
        name="SEPlib"
        label="SEPlib"
        initial_string="SEPlib"
        command="SetParameter"
        animateable="1"
        default_values="1"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Use the Stanford Exploration Project's axial conventions (d1=z, d2=x, d3=y). Parameters would be entered [z,x,y].</Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Transpose_XY"
        label="Transpose XY"
        initial_string="Transpose_XY"
        command="SetParameter"
        animateable="1"
        default_values="1"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation></Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="extent"
        label="extent"
        initial_string="extent"
        command="SetParameter"
        animateable="1"
        default_values="1 1 1"
        number_of_elements="3">
        <Documentation></Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="order"
        label="order"
        initial_string="order"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
        panel_visibility="default"
        name="origin"
        label="origin"
        initial_string="origin"
        command="SetParameter"
        animateable="1"
        default_values="0.0 0.0 0.0"
        number_of_elements="3">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
        panel_visibility="default"
        name="spacing"
        label="spacing"
        initial_string="spacing"
        command="SetParameter"
        animateable="1"
        default_values="1.0 1.0 1.0"
        number_of_elements="3">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGPpy.filt import tableToGrid&#xA;from vtk.util import numpy_support as nps&#xA;import numpy as np&#xA;&#xA;if order == 0:&#xA;    mem = 'F'&#xA;elif order == 1:&#xA;    mem = 'C'&#xA;else:&#xA;    mem = 'C'&#xA;&#xA;pdi = self.GetInput()&#xA;image = self.GetOutput() #vtkImageData&#xA;&#xA;tableToGrid(pdi, extent, spacing, origin, SEPlib=SEPlib, order=mem, swapXY=Transpose_XY, pdo=image)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from paraview import util&#xA;from PVGPpy.filt import refoldidx&#xA;# Setup the ImageData&#xA;idx = refoldidx(SEPlib=SEPlib, swapXY=Transpose_XY)&#xA;nx,ny,nz = extent[idx[0]],extent[idx[1]],extent[idx[2]]&#xA;# ABSOLUTELY NECESSARY FOR THE FILTER TO WORK:&#xA;util.SetOutputWholeExtent(self, [0,nx-1, 0,ny-1, 0,nz-1])&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>


      <StringVectorProperty command="SetPythonPath"
                            name="PythonPath"
                            number_of_elements="1"
                            panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>

    <!-- ./pvgp-grids//filter_translate_origin_uniform_grid.py -->
    <SourceProxy name="TranslateOriginOfUniformGrid" class="vtkPythonProgrammableFilter" label="Translate Origin of Uniform Grid">
      <Documentation
        long_help="This filter will translate the origin of vtkImageData to any specified Corner of the data set assuming it is currently in the South West Bottom Corner (will not work if Corner was moved prior)."
        short_help="This filter will translate the origin of vtkImageData to any specified Corner of the data set assuming it is currently in the South West Bottom Corner (will not work if Corner was moved prior).">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGP General Grids" />
      </Hints>

      <!-- Built on version: 0.6.0 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.6.0"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkImageData" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="6"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>
<IntVectorProperty
    name="Corner"
    command="SetParameter"
    number_of_elements="1"
    initial_string="test_drop_down_menu"
    default_values="0">
    <EnumerationDomain name="enum">
          <Entry value="1" text="South East Bottom"/>
          <Entry value="2" text="North West Bottom"/>
          <Entry value="3" text="North East Bottom"/>
          <Entry value="4" text="South West Top"/>
          <Entry value="5" text="South East Top"/>
          <Entry value="6" text="North West Top"/>
          <Entry value="7" text="North East Top"/>
    </EnumerationDomain>
    <Documentation>
        This is the new origin corner you'd like the origin to reside.
    </Documentation>
</IntVectorProperty>



      <InputProperty
        name="Input"
        command="SetInputConnection">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>
          
          <DataTypeDomain name="input_type">
            <DataType value="vtkImageData"/>
          </DataTypeDomain>
      </InputProperty>



      <IntVectorProperty
        panel_visibility="default"
        name="Corner"
        label="Corner"
        initial_string="Corner"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGPpy.filt import translateGridOrigin&#xA;pdi = self.GetInput() # vtkImageData&#xA;pdo = self.GetOutput() # vtkImageData&#xA;&#xA;translateGridOrigin(pdi, corner=Corner, pdo=pdo)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>



      <StringVectorProperty command="SetPythonPath"
                            name="PythonPath"
                            number_of_elements="1"
                            panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>

    <!-- ./pvgp-grids//filter_time_to_space.py -->
    <SourceProxy name="ProjectShotRecordToSpace" class="vtkPythonProgrammableFilter" label="Project Shot Record To Space">
      <Documentation
        long_help="TODO: Should we keep this in the repo?"
        short_help="TODO: Should we keep this in the repo?">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGP General Grids" />
      </Hints>

      <!-- Built on version: 0.6.0 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.6.0"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkPolyData" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="0"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>


      <InputProperty
        name="Input"
                    clean_command="RemoveAllInputs"
            command="AddInputConnection"
            multiple_input="1">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>
          
          <DataTypeDomain name="input_type">
            <DataType value="vtkTable"/>
          </DataTypeDomain>
      </InputProperty>



      <DoubleVectorProperty
        panel_visibility="default"
        name="ds"
        label="ds"
        initial_string="ds"
        command="SetParameter"
        animateable="1"
        default_values="1.0"
        number_of_elements="1">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
        panel_visibility="default"
        name="dt"
        label="dt"
        initial_string="dt"
        command="SetParameter"
        animateable="1"
        default_values="0.001"
        number_of_elements="1">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="ns"
        label="ns"
        initial_string="ns"
        command="SetParameter"
        animateable="1"
        default_values="126"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="nt"
        label="nt"
        initial_string="nt"
        command="SetParameter"
        animateable="1"
        default_values="1500"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from vtk.util import numpy_support as nps&#xA;import numpy as np&#xA;&#xA;pdo = self.GetOutput()&#xA;&#xA;idata = 0&#xA;icoord = 1&#xA;&#xA;if 'coord' in inputs[0].GetColumn(0).GetName():&#xA;    idata = 1&#xA;    icoord = 0&#xA;&#xA;# connect to input ports&#xA;data_in = inputs[idata]&#xA;coords_in = inputs[icoord]&#xA;&#xA;#print('Data: ', data_in.GetColumn(0).GetName())&#xA;#print('Coords: ', coords_in.GetColumn(0).GetName())&#xA;&#xA;# Put arrays from inout to numpy arrays&#xA;data = nps.vtk_to_numpy(data_in.GetColumn(0))&#xA;coords = nps.vtk_to_numpy(coords_in.GetColumn(0))&#xA;&#xA;# Reshape arrays&#xA;#data = np.reshape(data, (ns,nt,1)) # NOT NEEDED!!!!!!&#xA;coords = np.reshape(coords, (ns,6))&#xA;# Coordinate indices in the ns x 6 matrix:&#xA;gx = 3&#xA;gy = 2&#xA;gz = 5&#xA;sx = 1&#xA;sy = 0&#xA;sz = 4&#xA;&#xA;vtk_pts = vtk.vtkPoints()&#xA;traces_as_points = np.empty((nt,4))&#xA;# For each trace (essentially columns in both structures/arrays)&#xA;for i in range(ns):&#xA;    # Grab source and receiver coords&#xA;    pts = coords[i]&#xA;    # source:&#xA;    s = [pts[sx], pts[sy], pts[sz]]&#xA;    # Receiver:&#xA;    g = [pts[gx], pts[gy], pts[gz]]&#xA;    # Direction Vector: Vector points from receiver to source&#xA;    vec = [s[0] - g[0], s[1] - g[1], s[2] - g[2]]&#xA;    # Total spatial distance:&#xA;    dist = math.sqrt(vec[0]**2 + vec[1]**2) # + vec[2]**2&#xA;    # Get unit vector for direction&#xA;    vec = [vec[0]/dist, vec[1]/dist, vec[2]] # /dist&#xA;    # Determine spacing factor from distance of 3D line and total data to fit on that 3D line&#xA;    #ds = math.floor(dist) / nt&#xA;&#xA;    # Generate an array of coords for that whole line at that spacing and associate trace data&#xA;    line_coords = np.empty((nt,3))&#xA;    for j in range(nt):&#xA;        x = g[0] + (vec[0] * (nt-j) ) #* dt&#xA;        y = g[1] + (vec[1] * (nt-j) ) #* dt&#xA;        z = g[2]#s[2] + (vec[2] * j * ds)&#xA;        #line_coords = np.append(line_coords, [x,y,z])&#xA;        #line_coords[j] = [x,y,z]&#xA;        vtk_pts.InsertNextPoint(x,y,z)&#xA;&#xA;# Add each trace one after another (x,y,z,data) to 4D array&#xA;#temp = np.append(line_coords, data[i], axis=1)&#xA;#traces_as_points = np.append(traces_as_points, temp, axis=0)&#xA;#pdo.SetPoints(vtk_pts)&#xA;#insert = nps.numpy_to_vtk(num_array=data, deep=True, array_type=vtk.VTK_FLOAT)&#xA;pdo.GetPointData().AddArray(data_in.GetColumn(0))&#xA;#pdo.AddArray(data)&#xA;&#xA;# Add the points to the vtkPolyData object&#xA;# Right now the points are not associated with a line -&#xA;# it is just a set of unconnected points. We need to&#xA;# create a 'cell' object that ties points together&#xA;# to make a curve (in this case). This is done below.&#xA;# A 'cell' is just an object that tells how points are&#xA;# connected to make a 1D, 2D, or 3D object.&#xA;pdo.SetPoints(vtk_pts)&#xA;&#xA;# Make a vtkPolyLine which holds the info necessary&#xA;# to create a curve composed of line segments. This&#xA;# really just hold constructor data that will be passed&#xA;# to vtkPolyData to add a new line.&#xA;aPolyLine = vtk.vtkPolyLine()&#xA;&#xA;#Indicate the number of points along the line&#xA;numPts = ns*nt&#xA;aPolyLine.GetPointIds().SetNumberOfIds(numPts)&#xA;for i in range(0,numPts):&#xA;    # Add the points to the line. The first value indicates&#xA;    # the order of the point on the line. The second value&#xA;    # is a reference to a point in a vtkPoints object. Depends&#xA;    # on the order that Points were added to vtkPoints object.&#xA;    # Note that this will not be associated with actual points&#xA;    # until it is added to a vtkPolyData object which holds a&#xA;    # vtkPoints object.&#xA;    aPolyLine.GetPointIds().SetId(i, i)&#xA;&#xA;# Allocate the number of 'cells' that will be added. We are just&#xA;# adding one vtkPolyLine 'cell' to the vtkPolyData object.&#xA;pdo.Allocate(1, 1)&#xA;&#xA;# Add the poly line 'cell' to the vtkPolyData object.&#xA;pdo.InsertNextCell(aPolyLine.GetCellType(), aPolyLine.GetPointIds())&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>



      <StringVectorProperty command="SetPythonPath"
                            name="PythonPath"
                            number_of_elements="1"
                            panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>
  </ProxyGroup>
</ServerManagerConfiguration>