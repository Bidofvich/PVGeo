<ServerManagerConfiguration>
  <ProxyGroup name="filters">
    <SourceProxy name="TableToUniformGrid" class="vtkPythonProgrammableFilter" label="Table To Uniform Grid">
      <Documentation
        long_help="This filter takes a vtkTable object with columns that represent data to be translated (reshaped) into a 3D grid (2D also works, just set the third dimensions extent to 1). The grid will be a n1 by n2 by n3 vtkImageData structure and an origin (south-west bottom corner) can be set at any xyz point. Each column of the vtkTable will represent a data attribute of the vtkImageData formed (essentially a uniform mesh). The SEPlib option allows you to unfold data that was packed in the SEPlib format where the most important dimension is z and thus the z data is d1 (d1=z, d2=y, d3=x). When using SEPlib, specify n1 as the number of elements in the Z-direction, n2 as the number of elements in the X-direction, and n3 as the number of elements in the Y-direction (and so on for other parameters)."
        short_help="This filter takes a vtkTable object with columns that represent data to be translated (reshaped) into a 3D grid (2D also works, just set the third dimensions extent to 1). The grid will be a n1 by n2 by n3 vtkImageData structure and an origin (south-west bottom corner) can be set at any xyz point. Each column of the vtkTable will represent a data attribute of the vtkImageData formed (essentially a uniform mesh). The SEPlib option allows you to unfold data that was packed in the SEPlib format where the most important dimension is z and thus the z data is d1 (d1=z, d2=y, d3=x). When using SEPlib, specify n1 as the number of elements in the Z-direction, n2 as the number of elements in the X-direction, and n3 as the number of elements in the Y-direction (and so on for other parameters).">
      </Documentation>
      <Hints>
        <ShowInMenu category="CSM GP Filters" />
      </Hints>

      <!-- Output data type: "vtkImageData" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="6"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

<IntVectorProperty
    name="order"
    command="SetParameter"
    number_of_elements="1"
    initial_string="test_drop_down_menu"
    default_values="0">
    <EnumerationDomain name="enum">
            <Entry value="0" text="Fortran-style: column-major order"/>
            <Entry value="1" text="C-style: Row-major order"/>
    </EnumerationDomain>
    <Documentation>
        This is the type of memory ordering to use.
    </Documentation>
</IntVectorProperty>


      <InputProperty
        name="Input"
        command="SetInputConnection">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>

          <DataTypeDomain name="input_type">
            <DataType value="vtkTable"/>
          </DataTypeDomain>
      </InputProperty>



      <IntVectorProperty
        panel_visibility="default"
        name="SEPlib"
        label="SEPlib"
        initial_string="SEPlib"
        command="SetParameter"
        animateable="1"
        default_values="1"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Use the Stanford Exploration Project's axial conventions (d1=z, d2=x, d3=y). Parameters would be entered [z,x,y].</Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Transpose_XY"
        label="Transpose XY"
        initial_string="Transpose_XY"
        command="SetParameter"
        animateable="1"
        default_values="1"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation></Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="extent"
        label="extent"
        initial_string="extent"
        command="SetParameter"
        animateable="1"
        default_values="1 1 1"
        number_of_elements="3">
        <Documentation></Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="order"
        label="order"
        initial_string="order"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
        panel_visibility="default"
        name="origin"
        label="origin"
        initial_string="origin"
        command="SetParameter"
        animateable="1"
        default_values="0.0 0.0 0.0"
        number_of_elements="3">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
        panel_visibility="default"
        name="spacing"
        label="spacing"
        initial_string="spacing"
        command="SetParameter"
        animateable="1"
        default_values="1.0 1.0 1.0"
        number_of_elements="3">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGPpy.filt import tableToGrid&#xA;from vtk.util import numpy_support as nps&#xA;import numpy as np&#xA;&#xA;if order == 0:&#xA;    mem = 'F'&#xA;elif order == 1:&#xA;    mem = 'C'&#xA;else:&#xA;    mem = 'C'&#xA;&#xA;pdi = self.GetInput()&#xA;image = self.GetOutput() #vtkImageData&#xA;&#xA;tableToGrid(pdi, extent, spacing, origin, SEPlib=SEPlib, order=mem, swapXY=Transpose_XY, pdo=image)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from paraview import util&#xA;from PVGPpy.filt import refoldidx&#xA;# Setup the ImageData&#xA;idx = refoldidx(SEPlib=SEPlib, swapXY=Transpose_XY)&#xA;nx,ny,nz = extent[idx[0]],extent[idx[1]],extent[idx[2]]&#xA;# ABSOLUTELY NECESSARY FOR THE FILTER TO WORK:&#xA;util.SetOutputWholeExtent(self, [0,nx-1, 0,ny-1, 0,nz-1])&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>

    </SourceProxy>
 </ProxyGroup>
</ServerManagerConfiguration>
