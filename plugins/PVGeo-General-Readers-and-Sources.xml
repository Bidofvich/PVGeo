<ServerManagerConfiguration>
  <!-- CATEGORY SOURCES -->
  <ProxyGroup name="sources">


    <!-- ./readers-general//read_pvgp_grid.py -->
    <SourceProxy
      name="ReadPVGeoGrid"
      class="vtkPythonProgrammableFilter"
      label="Read PVGeo Uniform Grid">
      <Documentation
        long_help=""
        short_help="">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGeo General Sources" />
        <ReaderFactory extensions="pvgeo PVGeo"
          file_description="PVGeo Unifrom Grid Reader. Opens a header file which points to data arrays to fill a uniform grid." />
      </Hints>

      <!-- Built on version: 0.7.2 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.7.2"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkImageData" -->
      <IntVectorProperty command="SetOutputDataSetType"
        default_values="6"
        name="OutputDataSetType"
        number_of_elements="1"
        panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>




      <StringVectorProperty
        name="FileNames"
        initial_string="FileNames"
        animateable="0"
        number_of_elements="0"
        command="AddParameter"
        clean_command="ClearParameter"
        repeat_command="1"
        panel_visibility="advanced">
        <FileListDomain name="files"/>
            <Documentation>
            The list of files to be read by the reader.
            </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
            <Documentation>
            Available timestep values.
            </Documentation>
        </DoubleVectorProperty>
        <Hints>
            <ReaderFactory extensions="pvgeo PVGeo"
                    file_description="PVGeo Unifrom Grid Reader. Opens a header file which points to data arrays to fill a uniform grid." />
        </Hints>
        

      <DoubleVectorProperty
        panel_visibility="advanced"
        name="Time_Step"
        label="Time Step"
        initial_string="Time_Step"
        command="SetParameter"
        animateable="1"
        default_values="1.0"
        number_of_elements="1">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="import os&#xA;from PVGeo.grids import readPVGeoGrid&#xA;from PVGeo._helpers import getTimeStepFileIndex&#xA;pdo = self.GetOutput()&#xA;&#xA;# This finds the index for the FileNames for the requested timestep&#xA;i = getTimeStepFileIndex(self, FileNames, dt=Time_Step)&#xA;path = os.path.dirname(FileNames[i])&#xA;&#xA;readPVGeoGrid(FileNames[i], pdo=pdo, path=path)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from paraview import util&#xA;from PVGeo._helpers import setOutputTimesteps&#xA;from PVGeo.grids import readPVGeoGridExtents&#xA;# This is necessary to set time steps&#xA;setOutputTimesteps(self, FileNames[0], dt=Time_Step)&#xA;# NOTE: if using time series, they all must have the same extents&#xA;ext = readPVGeoGridExtents(FileNames[0])&#xA;util.SetOutputWholeExtent(self, ext)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>


      <StringVectorProperty
        command="SetPythonPath"
        name="PythonPath"
        number_of_elements="1"
        panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>

    <!-- ./readers-general//example_reader.py -->
    <SourceProxy
      name="ExamplePythonReader"
      class="vtkPythonProgrammableFilter"
      label="Example Python Reader">
      <Documentation
        long_help="This reader provides a starting point for making a file reader in a Programmable Python Source."
        short_help="This reader provides a starting point for making a file reader in a Programmable Python Source.">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGeo General Sources" />
        <ReaderFactory extensions=""
          file_description="All Files: Example Python Reader" />
      </Hints>

      <!-- Built on version: 0.7.2 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.7.2"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkUnstructuredGrid" -->
      <IntVectorProperty command="SetOutputDataSetType"
        default_values="4"
        name="OutputDataSetType"
        number_of_elements="1"
        panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>




      <StringVectorProperty
        name="FileNames"
        initial_string="FileNames"
        animateable="0"
        number_of_elements="0"
        command="AddParameter"
        clean_command="ClearParameter"
        repeat_command="1"
        panel_visibility="advanced">
        <FileListDomain name="files"/>
            <Documentation>
            The list of files to be read by the reader.
            </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
            <Documentation>
            Available timestep values.
            </Documentation>
        </DoubleVectorProperty>
        <Hints>
            <ReaderFactory extensions=""
                    file_description="All Files: Example Python Reader" />
        </Hints>
        

      <IntVectorProperty
        panel_visibility="default"
        name="Print_File_Names"
        label="Print File Names"
        initial_string="Print_File_Names"
        command="SetParameter"
        animateable="1"
        default_values="1"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This is a description about the Print_File_Names property! This will simple print the file name at the current time step if set to true.</Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
        panel_visibility="advanced"
        name="Time_Step"
        label="Time Step"
        initial_string="Time_Step"
        command="SetParameter"
        animateable="1"
        default_values="1.0"
        number_of_elements="1">
        <Documentation>An advanced property for the time step in seconds.</Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="&quot;&quot;&quot;Create a VTK output given the list of FileNames and the current timestep.&#xA;This script can access self and FileNames and should return an output of type OutputDataType defined above&quot;&quot;&quot;&#xA;from PVGeo._helpers import getTimeStepFileIndex&#xA;&#xA;# This finds the index for the FileNames for the requested timestep&#xA;i = getTimeStepFileIndex(self, FileNames, dt=Time_Step)&#xA;&#xA;&quot;&quot;&quot;If you specifically do not want the ability to read time series&#xA;Then delete the above code know that a list of file names will be given in the parameter `FileNames` which you can iterate over. &quot;&quot;&quot;&#xA;# --------------------- #&#xA;pdo = self.GetOutput() # VTK Data Type specified in `OutputDataType`&#xA;# Generate Output Below&#xA;if Print_File_Names:&#xA;    print(FileNames[i])&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from PVGeo._helpers import setOutputTimesteps&#xA;# This is necessary to set time steps&#xA;setOutputTimesteps(self, FileNames, dt=Time_Step)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>


      <StringVectorProperty
        command="SetPythonPath"
        name="PythonPath"
        number_of_elements="1"
        panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>

    <!-- ./readers-general//read_delimited_file_to_table.py -->
    <SourceProxy
      name="ReadDelimitedTextFileToTable"
      class="vtkPythonProgrammableFilter"
      label="Read Delimited Text File To Table">
      <Documentation
        long_help="This reader will take in any delimited text file and make a vtkTable from it. This is not much different than the default .txt or .csv reader in Paraview, however it gives us room to use our own extensions and a little more flexibility in the structure of the files we import."
        short_help="This reader will take in any delimited text file and make a vtkTable from it. This is not much different than the default .txt or .csv reader in Paraview, however it gives us room to use our own extensions and a little more flexibility in the structure of the files we import.">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGeo General Sources" />
        <ReaderFactory extensions="dat csv txt text ascii xyz"
          file_description="PVGeo: Delimited Text File" />
      </Hints>

      <!-- Built on version: 0.7.2 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.7.2"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkTable" -->
      <IntVectorProperty command="SetOutputDataSetType"
        default_values="19"
        name="OutputDataSetType"
        number_of_elements="1"
        panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>




      <StringVectorProperty
        name="FileNames"
        initial_string="FileNames"
        animateable="0"
        number_of_elements="0"
        command="AddParameter"
        clean_command="ClearParameter"
        repeat_command="1"
        panel_visibility="advanced">
        <FileListDomain name="files"/>
            <Documentation>
            The list of files to be read by the reader.
            </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
            <Documentation>
            Available timestep values.
            </Documentation>
        </DoubleVectorProperty>
        <Hints>
            <ReaderFactory extensions="dat csv txt text ascii xyz"
                    file_description="PVGeo: Delimited Text File" />
        </Hints>
        

      <StringVectorProperty
        panel_visibility="default"
        name="Comments"
        label="Comments"
        initial_string="Comments"
        command="SetParameter"
        animateable="1"
        default_values="#"
        number_of_elements="1">
        <Documentation>The identifier for comments within the file.</Documentation>
      </StringVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="Delimiter_Field"
        label="Delimiter Field"
        initial_string="Delimiter_Field"
        command="SetParameter"
        animateable="1"
        default_values=" "
        number_of_elements="1">
        <Documentation>The input file's delimiter. To use a tab delimiter please set the Use_Tab_Delimiter parameter.</Documentation>
      </StringVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Has_Titles"
        label="Has Titles"
        initial_string="Has_Titles"
        command="SetParameter"
        animateable="1"
        default_values="1"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>A boolean for if the delimited file has header titles for the data arrays.</Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Skiprows"
        label="Skiprows"
        initial_string="Skiprows"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <Documentation>The integer number of rows to skip at the top of the file</Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
        panel_visibility="advanced"
        name="Time_Step"
        label="Time Step"
        initial_string="Time_Step"
        command="SetParameter"
        animateable="1"
        default_values="1.0"
        number_of_elements="1">
        <Documentation>An advanced property for the time step in seconds.</Documentation>
      </DoubleVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Use_Tab_Delimiter"
        label="Use Tab Delimiter"
        initial_string="Use_Tab_Delimiter"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>A boolean to override the Delimiter_Field and use a Tab delimiter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGeo.readers_general import delimitedText&#xA;from PVGeo._helpers import getTimeStepFileIndex&#xA;&#xA;# This finds the index for the FileNames for the requested timestep&#xA;i = getTimeStepFileIndex(self, FileNames, dt=Time_Step)&#xA;&#xA;# Generate Output&#xA;pdo = self.GetOutput()&#xA;delimitedText(FileNames[i], deli=Delimiter_Field, useTab=Use_Tab_Delimiter, hasTits=Has_Titles, skiprows=Skiprows, comments=Comments, pdo=pdo)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from PVGeo._helpers import setOutputTimesteps&#xA;# This is necessary to set time steps&#xA;setOutputTimesteps(self, FileNames, dt=Time_Step)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>


      <StringVectorProperty
        command="SetPythonPath"
        name="PythonPath"
        number_of_elements="1"
        panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>

    <!-- ./readers-general//create_earth_source.py -->
    <SourceProxy
      name="CreateEarthSource"
      class="vtkPythonProgrammableFilter"
      label="Create Earth Source">
      <Documentation
        long_help=""
        short_help="">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGeo General Sources" />
      </Hints>

      <!-- Built on version: 0.7.2 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.7.2"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkPolyData" -->
      <IntVectorProperty command="SetOutputDataSetType"
        default_values="0"
        name="OutputDataSetType"
        number_of_elements="1"
        panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>





      <DoubleVectorProperty
        panel_visibility="default"
        name="Radius"
        label="Radius"
        initial_string="Radius"
        command="SetParameter"
        animateable="1"
        default_values="6371.0"
        number_of_elements="1">
        <Documentation></Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="pdo = self.GetOutput()&#xA;earth = vtk.vtkEarthSource()&#xA;earth.SetRadius(Radius)&#xA;earth.OutlineOn()&#xA;earth.Update()&#xA;&#xA;pdo.DeepCopy(earth.GetOutput())&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>



      <StringVectorProperty
        command="SetPythonPath"
        name="PythonPath"
        number_of_elements="1"
        panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>

    <!-- ./readers-general//read_binary_file_to_table.py -->
    <SourceProxy
      name="ReadPackedBinaryFileToTable"
      class="vtkPythonProgrammableFilter"
      label="Read Packed Binary File To Table">
      <Documentation
        long_help="This reads in float or double data that is packed into a binary file format. It will treat the data as one long array and make a vtkTable with one column of that data. The reader uses defaults to import as floats with native endianness. Use the Table to Uniform Grid or the Reshape Table filters to give more meaning to the data. We chose to use a vtkTable object as the output of this reader because it gives us more flexibility in the filters we can apply to this data down the pipeline and keeps thing simple when using filters in this repository."
        short_help="This reads in float or double data that is packed into a binary file format. It will treat the data as one long array and make a vtkTable with one column of that data. The reader uses defaults to import as floats with native endianness. Use the Table to Uniform Grid or the Reshape Table filters to give more meaning to the data. We chose to use a vtkTable object as the output of this reader because it gives us more flexibility in the filters we can apply to this data down the pipeline and keeps thing simple when using filters in this repository.">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGeo General Sources" />
        <ReaderFactory extensions="H@ bin rsf rsf@ HH"
          file_description="PVGeo: Binary Packed Floats or Doubles" />
      </Hints>

      <!-- Built on version: 0.7.2 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.7.2"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkTable" -->
      <IntVectorProperty command="SetOutputDataSetType"
        default_values="19"
        name="OutputDataSetType"
        number_of_elements="1"
        panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty
        name="Endianness"
        command="SetParameter"
        number_of_elements="1"
        initial_string="test_drop_down_menu"
        default_values="0">
        <EnumerationDomain name="enum">
          <Entry value="0" text="Native"/>
          <Entry value="1" text="Little-Endian"/>
          <Entry value="2" text="Big-Endian"/>
        </EnumerationDomain>
        <Documentation>
          This is the type memory endianness.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        name="DataType"
        command="SetParameter"
        number_of_elements="1"
        initial_string="test_drop_down_menu"
        default_values="0">
        <EnumerationDomain name="enum">
          <Entry value="0" text="Float 64"/>
          <Entry value="1" text="Float 32"/>
          <Entry value="2" text="Integer"/>
        </EnumerationDomain>
        <Documentation>
          This is data type to read.
        </Documentation>
      </IntVectorProperty>




      <StringVectorProperty
        name="FileNames"
        initial_string="FileNames"
        animateable="0"
        number_of_elements="0"
        command="AddParameter"
        clean_command="ClearParameter"
        repeat_command="1"
        panel_visibility="advanced">
        <FileListDomain name="files"/>
            <Documentation>
            The list of files to be read by the reader.
            </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
            <Documentation>
            Available timestep values.
            </Documentation>
        </DoubleVectorProperty>
        <Hints>
            <ReaderFactory extensions="H@ bin rsf rsf@ HH"
                    file_description="PVGeo: Binary Packed Floats or Doubles" />
        </Hints>
        

      <IntVectorProperty
        panel_visibility="default"
        name="DataType"
        label="DataType"
        initial_string="DataType"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="Data_Name"
        label="Data Name"
        initial_string="Data_Name"
        command="SetParameter"
        animateable="1"
        default_values=""
        number_of_elements="1">
        <Documentation>The string name of the data array generated from the inut file.</Documentation>
      </StringVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Endianness"
        label="Endianness"
        initial_string="Endianness"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
        panel_visibility="advanced"
        name="Time_Step"
        label="Time Step"
        initial_string="Time_Step"
        command="SetParameter"
        animateable="1"
        default_values="1.0"
        number_of_elements="1">
        <Documentation>An advanced property for the time step in seconds.</Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGeo.readers_general import packedBinaries&#xA;from PVGeo._helpers import getTimeStepFileIndex&#xA;&#xA;# This finds the index for the FileNames for the requested timestep&#xA;i = getTimeStepFileIndex(self, FileNames, dt=Time_Step)&#xA;endi = ['', '&lt;', '&gt;']&#xA;dtype = ['d', 'f', 'i']&#xA;&#xA;# Generate Output&#xA;pdo = self.GetOutput()&#xA;packedBinaries(FileNames[i], dataNm=Data_Name, pdo=pdo, endian=endi[Endianness], dtype=dtype[DataType])&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from PVGeo._helpers import setOutputTimesteps&#xA;# This is necessary to set time steps&#xA;setOutputTimesteps(self, FileNames, dt=Time_Step)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>


      <StringVectorProperty
        command="SetPythonPath"
        name="PythonPath"
        number_of_elements="1"
        panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>

    <!-- ./readers-general//read_xyz_file_to_table.py -->
    <SourceProxy
      name="ReadXYZFileToTable"
      class="vtkPythonProgrammableFilter"
      label="Read XYZ File To Table">
      <Documentation
        long_help="This reader will take in any delimited text file and make a vtkTable from it. This is not much different than the default .txt or .csv reader in Paraview, however it gives us room to use our own extensions and a little more flexibility in the structure of the files we import."
        short_help="This reader will take in any delimited text file and make a vtkTable from it. This is not much different than the default .txt or .csv reader in Paraview, however it gives us room to use our own extensions and a little more flexibility in the structure of the files we import.">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGeo General Sources" />
        <ReaderFactory extensions="xyz"
          file_description="PVGeo: XYZ File Table" />
      </Hints>

      <!-- Built on version: 0.7.2 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.7.2"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkTable" -->
      <IntVectorProperty command="SetOutputDataSetType"
        default_values="19"
        name="OutputDataSetType"
        number_of_elements="1"
        panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>




      <StringVectorProperty
        name="FileNames"
        initial_string="FileNames"
        animateable="0"
        number_of_elements="0"
        command="AddParameter"
        clean_command="ClearParameter"
        repeat_command="1"
        panel_visibility="advanced">
        <FileListDomain name="files"/>
            <Documentation>
            The list of files to be read by the reader.
            </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
            <Documentation>
            Available timestep values.
            </Documentation>
        </DoubleVectorProperty>
        <Hints>
            <ReaderFactory extensions="xyz"
                    file_description="PVGeo: XYZ File Table" />
        </Hints>
        

      <StringVectorProperty
        panel_visibility="default"
        name="Comments"
        label="Comments"
        initial_string="Comments"
        command="SetParameter"
        animateable="1"
        default_values="#"
        number_of_elements="1">
        <Documentation>The identifier for comments within the file.</Documentation>
      </StringVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="Delimiter_Field"
        label="Delimiter Field"
        initial_string="Delimiter_Field"
        command="SetParameter"
        animateable="1"
        default_values=" "
        number_of_elements="1">
        <Documentation>The input file's delimiter. To use a tab delimiter please set the Use_Tab_Delimiter parameter.</Documentation>
      </StringVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Skiprows"
        label="Skiprows"
        initial_string="Skiprows"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <Documentation>The integer number of rows to skip at the top of the file</Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
        panel_visibility="advanced"
        name="Time_Step"
        label="Time Step"
        initial_string="Time_Step"
        command="SetParameter"
        animateable="1"
        default_values="1.0"
        number_of_elements="1">
        <Documentation>An advanced property for the time step in seconds.</Documentation>
      </DoubleVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Use_Tab_Delimiter"
        label="Use Tab Delimiter"
        initial_string="Use_Tab_Delimiter"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>A boolean to override the Delimiter_Field and use a Tab delimiter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGeo.readers_general import xyzRead&#xA;from PVGeo._helpers import getTimeStepFileIndex&#xA;&#xA;# This finds the index for the FileNames for the requested timestep&#xA;i = getTimeStepFileIndex(self, FileNames, dt=Time_Step)&#xA;&#xA;# Generate Output&#xA;pdo = self.GetOutput()&#xA;#xyzRead(FileName, deli=' ', useTab=False, skiprows=0, comments='#', pdo=None)&#xA;xyzRead(FileNames[i], deli=Delimiter_Field, useTab=Use_Tab_Delimiter, skiprows=Skiprows, comments=Comments, pdo=pdo)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from PVGeo._helpers import setOutputTimesteps&#xA;# This is necessary to set time steps&#xA;setOutputTimesteps(self, FileNames, dt=Time_Step)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>


      <StringVectorProperty
        command="SetPythonPath"
        name="PythonPath"
        number_of_elements="1"
        panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>

    <!-- ./readers-general//read_ssrsf_file_to_table.py -->
    <SourceProxy
      name="ReadMadagascarFileToTable"
      class="vtkPythonProgrammableFilter"
      label="Read Madagascar File To Table">
      <Documentation
        long_help="This reads in float or double data that is packed into a Madagascar Single Stream RSF binary file format with a leader header. The reader ignores all of the ascii header details by searching for the sequence of three special characters: EOL EOL EOT and it will treat the following binary packed data as one long array and make a `vtkTable` with one column of that data. The reader defaults to import as floats with native endianness. Use the Table to Uniform Grid or the Reshape Table filters to give more meaning to the data. We will later implement the ability to create a gridded volume from the header info. We chose to use a vtkTable object as the output of this reader because it gives us more flexibility in the filters we can apply to this data down the pipeline and keeps thing simple when using filters in this repository. Details: http://www.ahay.org/wiki/RSF_Comprehensive_Description#Single-stream_RSF"
        short_help="This reads in float or double data that is packed into a Madagascar Single Stream RSF binary file format with a leader header. The reader ignores all of the ascii header details by searching for the sequence of three special characters: EOL EOL EOT and it will treat the following binary packed data as one long array and make a `vtkTable` with one column of that data. The reader defaults to import as floats with native endianness. Use the Table to Uniform Grid or the Reshape Table filters to give more meaning to the data. We will later implement the ability to create a gridded volume from the header info. We chose to use a vtkTable object as the output of this reader because it gives us more flexibility in the filters we can apply to this data down the pipeline and keeps thing simple when using filters in this repository. Details: http://www.ahay.org/wiki/RSF_Comprehensive_Description#Single-stream_RSF">
      </Documentation>
      <Hints>
        <ShowInMenu category="PVGeo General Sources" />
        <ReaderFactory extensions="H@ bin rsf rsf@ HH"
          file_description="PVGeo: Madagascar Single Stream RSF Format" />
      </Hints>

      <!-- Built on version: 0.7.2 -->
      <StringVectorProperty
        panel_visibility="never"
        name="BUILDVERSION"
        label="BUILDVERSION"
        initial_string="BUILDVERSION"
        command="SetParameter"
        animateable="1"
        default_values="0.7.2"
        number_of_elements="1">
        <Documentation>This is an attribute to the filter to know what version it was built on. This is necessary for plugins that have major changes across versions and might need to alert a user that their state file is out of date.</Documentation>
      </StringVectorProperty>

      <!-- Output data type: "vtkTable" -->
      <IntVectorProperty command="SetOutputDataSetType"
        default_values="19"
        name="OutputDataSetType"
        number_of_elements="1"
        panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty
        name="Endianness"
        command="SetParameter"
        number_of_elements="1"
        initial_string="test_drop_down_menu"
        default_values="0">
        <EnumerationDomain name="enum">
          <Entry value="0" text="Native"/>
          <Entry value="1" text="Little-Endian"/>
          <Entry value="2" text="Big-Endian"/>
        </EnumerationDomain>
        <Documentation>
          This is the type memory endianness.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
        name="DataType"
        command="SetParameter"
        number_of_elements="1"
        initial_string="test_drop_down_menu"
        default_values="0">
        <EnumerationDomain name="enum">
          <Entry value="0" text="Float 64"/>
          <Entry value="1" text="Float 32"/>
          <Entry value="2" text="Integer"/>
        </EnumerationDomain>
        <Documentation>
          This is data type to read.
        </Documentation>
      </IntVectorProperty>




      <StringVectorProperty
        name="FileNames"
        initial_string="FileNames"
        animateable="0"
        number_of_elements="0"
        command="AddParameter"
        clean_command="ClearParameter"
        repeat_command="1"
        panel_visibility="advanced">
        <FileListDomain name="files"/>
            <Documentation>
            The list of files to be read by the reader.
            </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
            <Documentation>
            Available timestep values.
            </Documentation>
        </DoubleVectorProperty>
        <Hints>
            <ReaderFactory extensions="H@ bin rsf rsf@ HH"
                    file_description="PVGeo: Madagascar Single Stream RSF Format" />
        </Hints>
        

      <IntVectorProperty
        panel_visibility="default"
        name="DataType"
        label="DataType"
        initial_string="DataType"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        panel_visibility="default"
        name="Data_Name"
        label="Data Name"
        initial_string="Data_Name"
        command="SetParameter"
        animateable="1"
        default_values=""
        number_of_elements="1">
        <Documentation>The string name of the data array generated from the inut file.</Documentation>
      </StringVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Endianness"
        label="Endianness"
        initial_string="Endianness"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
        panel_visibility="advanced"
        name="Time_Step"
        label="Time Step"
        initial_string="Time_Step"
        command="SetParameter"
        animateable="1"
        default_values="1.0"
        number_of_elements="1">
        <Documentation>An advanced property for the time step in seconds.</Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGeo.readers_general import madagascar&#xA;from PVGeo._helpers import getTimeStepFileIndex&#xA;&#xA;# This finds the index for the FileNames for the requested timestep&#xA;i = getTimeStepFileIndex(self, FileNames, dt=Time_Step)&#xA;endi = ['', '&lt;', '&gt;']&#xA;dtype = ['d', 'f', 'i']&#xA;&#xA;# Generate Output&#xA;pdo = self.GetOutput()&#xA;madagascar(FileNames[i], dataNm=Data_Name, pdo=pdo, endian=endi[Endianness], dtype=dtype[DataType])&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="from PVGeo._helpers import setOutputTimesteps&#xA;# This is necessary to set time steps&#xA;setOutputTimesteps(self, FileNames, dt=Time_Step)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>


      <StringVectorProperty
        command="SetPythonPath"
        name="PythonPath"
        number_of_elements="1"
        panel_visibility="advanced">
        <Documentation>A semi-colon (;) separated list of directories to add to
        the python library search path.</Documentation>
      </StringVectorProperty>
    </SourceProxy>
  </ProxyGroup>
</ServerManagerConfiguration>