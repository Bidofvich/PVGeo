<ServerManagerConfiguration>
  <ProxyGroup name="sources">
    <SourceProxy name="ReadPackedBinaryFileToTable" class="vtkPythonProgrammableFilter" label="Read Packed Binary File To Table">
      <Documentation
        long_help="This filter reads in float or double data that is packed into a binary file format. It will treat the data as one long array and make a vtkTable with one column of that data. The reader uses big endian and defaults to import as floats. Use the Table to Uniform Grid or the Reshape Table filters to give more meaning to the data. We chose to use a vtkTable object as the output of this reader because it gives us more flexibility in the filters we can apply to this data down the pipeline and keeps thing simple when using filters in this repository."
        short_help="This filter reads in float or double data that is packed into a binary file format. It will treat the data as one long array and make a vtkTable with one column of that data. The reader uses big endian and defaults to import as floats. Use the Table to Uniform Grid or the Reshape Table filters to give more meaning to the data. We chose to use a vtkTable object as the output of this reader because it gives us more flexibility in the filters we can apply to this data down the pipeline and keeps thing simple when using filters in this repository.">
      </Documentation>
      <Hints>
        <ShowInMenu category="CSM GP Readers" />
      </Hints>
      <Hints>
        <ReaderFactory extensions="H@ bin"
          file_description="Binary Packed Floats or Doubles" />
      </Hints>

      <!-- Output data type: "vtkTable" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="19"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>



      <StringVectorProperty
        name="FileNames"
        initial_string="FileNames"
        animateable="0"
        number_of_elements="0"
        command="AddParameter"
        clean_command="ClearParameter"
        repeat_command="1"
        panel_visibility="advanced">
        <FileListDomain name="files"/>
            <Documentation>
            The list of files to be read by the reader.
            </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
            <Documentation>
            Available timestep values.
            </Documentation>
        </DoubleVectorProperty>
        <Hints>
            <ReaderFactory extensions="H@ bin"
                    file_description="Binary Packed Floats or Doubles" />
        </Hints>


      <StringVectorProperty
        panel_visibility="default"
        name="Data_Name"
        label="Data Name"
        initial_string="Data_Name"
        command="SetParameter"
        animateable="1"
        default_values=""
        number_of_elements="1">
        <Documentation></Documentation>
      </StringVectorProperty>

      <IntVectorProperty
        panel_visibility="default"
        name="Double_Values"
        label="Double Values"
        initial_string="Double_Values"
        command="SetParameter"
        animateable="1"
        default_values="0"
        number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation></Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="from PVGPpy.read import packedBinaries&#xA;import numpy as np&#xA;&#xA;def GetUpdateTimestep(algorithm):&#xA;    &quot;&quot;&quot;Returns the requested time value, or None if not present&quot;&quot;&quot;&#xA;    executive = algorithm.GetExecutive()&#xA;    outInfo = executive.GetOutputInformation(0)&#xA;    if outInfo.Has(executive.UPDATE_TIME_STEP()):&#xA;        return outInfo.Get(executive.UPDATE_TIME_STEP())&#xA;    else:&#xA;        return None&#xA;# Get the current timestep&#xA;req_time = GetUpdateTimestep(self)&#xA;# Read the closest file&#xA;#np.asarray([get_time(file) for file in FileNames])&#xA;xtime = np.arange(len(FileNames), dtype=float)&#xA;i = np.argwhere(xtime == req_time)&#xA;&#xA;# Generate Output&#xA;pdo = self.GetOutput()&#xA;packedBinaries(FileNames[i], dblVals=Double_Values, dataNm=Data_Name, pdo=pdo)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property contains the text of a python program that
        the programmable source runs.</Documentation>
        </StringVectorProperty>

      <StringVectorProperty
        name="InformationScript"
        label="RequestInformation Script"
        command="SetInformationScript"
        number_of_elements="1"
        default_values="def setOutputTimesteps(algorithm):&#xA;    executive = algorithm.GetExecutive()&#xA;    outInfo = executive.GetOutputInformation(0)&#xA;    # Calculate list of timesteps here&#xA;    #np.asarray([get_time(file) for file in FileNames])&#xA;    xtime = range(len(FileNames))&#xA;    outInfo.Remove(executive.TIME_STEPS())&#xA;    for i in range(len(FileNames)):&#xA;        outInfo.Append(executive.TIME_STEPS(), xtime[i])&#xA;    # Remove and set time range info&#xA;    outInfo.Remove(executive.TIME_RANGE())&#xA;    outInfo.Append(executive.TIME_RANGE(), xtime[0])&#xA;    outInfo.Append(executive.TIME_RANGE(), xtime[-1])&#xA;&#xA;setOutputTimesteps(self)&#xA;"
        panel_visibility="advanced">
        <Hints>
          <Widget type="multi_line" syntax="python"/>
        </Hints>
        <Documentation>This property is a python script that is executed during
        the RequestInformation pipeline pass. Use this to provide information
        such as WHOLE_EXTENT to the pipeline downstream.</Documentation>
      </StringVectorProperty>

    </SourceProxy>
 </ProxyGroup>
</ServerManagerConfiguration>
